# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries
# SPDX-License-Identifier: MIT

import time
import board
import adafruit_hcsr04
from digitalio import DigitalInOut, Direction, Pull
import microcontroller
import asyncio

sonar1 = adafruit_hcsr04.HCSR04(trigger_pin=board.GP14, echo_pin=board.GP15)
sonar2 = adafruit_hcsr04.HCSR04(trigger_pin=board.GP3, echo_pin=board.GP2)
sonar3 = adafruit_hcsr04.HCSR04(trigger_pin=board.GP5, echo_pin=board.GP4)
sonar4 = adafruit_hcsr04.HCSR04(trigger_pin=board.GP7, echo_pin=board.GP6)
sonar5 = adafruit_hcsr04.HCSR04(trigger_pin=board.GP8, echo_pin=board.GP9)

buzzer1=DigitalInOut(board.GP10)
buzzer1.direction=Direction.OUTPUT

buzzer2=DigitalInOut(board.GP11)
buzzer2.direction=Direction.OUTPUT

buzzer3=DigitalInOut(board.GP12)
buzzer3.direction=Direction.OUTPUT

buzzer4=DigitalInOut(board.GP13)
buzzer4.direction=Direction.OUTPUT

buzzer5=DigitalInOut(board.GP21)
buzzer5.direction=Direction.OUTPUT

#on board led
led=DigitalInOut(board.GP25)
led.direction=Direction.OUTPUT
led.value=True

sonarList = [sonar1, sonar2, sonar3, sonar4, sonar5]
buzzerList = [buzzer1, buzzer2, buzzer3, buzzer4, buzzer5]

#distance sensor 1
def get_sensor_value(idx):
    try:
        a=(sonarList[idx].distance)
        b=(sonarList[idx].distance)
        return((a+b)/2)
    except RuntimeError:
        return 0

#async def blink(pin, interval, count):
#    print("it should be here")
#    print(pinNumbers[idx])


async def controlBuzzer(idx):
    buzzer = buzzerList[idx]
    while True:
        sensor_value = get_sensor_value(idx)
        if sensor_value>100:
            pass
        else:

            if sensor_value < 80 and sensor_value > 60:
                print("Sensor " + str(idx) + " w/ value 1"+ str(sensor_value))
                buzzer.value = True
                #time.sleep(0.5)
                await asyncio.sleep(0.1)  # Don't forget the "await"!
                buzzer.value = False
                #time.sleep(0.5)
                await asyncio.sleep(0.5)  # Don't forget the "await"!
            elif sensor_value < 60 and sensor_value > 40:
                print("Sensor " + str(idx) + " w/ value 1"+ str(sensor_value))
                buzzer.value = True
                #time.sleep(0.5)
                await asyncio.sleep(0.3)  # Don't forget the "await"!
                buzzer.value = False
                #time.sleep(0.5)
                await asyncio.sleep(0.4)  # Don't forget the "await"!
            elif sensor_value < 40 and sensor_value > 20:
                print("Sensor " + str(idx) + " w/ value 1"+ str(sensor_value))
                buzzer.value = True
                #time.sleep(0.5)
                await asyncio.sleep(0.5)  # Don't forget the "await"!
                buzzer.value = False
                #time.sleep(0.5)
                await asyncio.sleep(0.3)  # Don't forget the "await"!
            elif sensor_value < 20 and sensor_value > 2:
                print("Sensor " + str(idx) + " w/ value 1"+ str(sensor_value))
                buzzer.value = True
                #time.sleep(0.5)
                await asyncio.sleep(0.7)  # Don't forget the "await"!
                buzzer.value = False
                #time.sleep(0.5)
                await asyncio.sleep(0.2)  # Don't forget the "await"!
            else: #quiet
                print("Sensor " + str(idx) + " w/ value 2"+ str(sensor_value))
                pass
                #blink(idx, 0, 0)
            await asyncio.sleep(0.1)

async def main():
    tasks = []
    for idx in range(5):
        tasks.append(asyncio.create_task(controlBuzzer(idx)))

    await asyncio.gather(*tasks) # Don't forget "await"!
    print("done")


asyncio.run(main())
